-- Create Students table
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100),
    major VARCHAR(100)
);

-- Create Courses table
CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    department_id INT,
    instructor_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);

-- Create Instructors table
CREATE TABLE Instructors (
    instructor_id INT PRIMARY KEY,
    name VARCHAR(100),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

-- Create Departments table
CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    name VARCHAR(100)
);

-- Insert sample data for Students
INSERT INTO Students (student_id, name, major) 
VALUES (1, 'John Doe', 'Computer Science'),
       (2, 'Jane Smith', 'Engineering'),
       (3, 'Alice Johnson', 'Mathematics');

-- Insert sample data for Courses
INSERT INTO Courses (course_id, course_name, department_id, instructor_id) 
VALUES (101, 'Introduction to Programming', 1, 1),
       (102, 'Database Management', 1, 2),
       (103, 'Calculus I', 3, 3);

-- Insert sample data for Instructors
INSERT INTO Instructors (instructor_id, name, department_id) 
VALUES (1, 'Professor Anderson', 1),
       (2, 'Professor Brown', 1),
       (3, 'Professor Clark', 3);

-- Insert sample data for Departments
INSERT INTO Departments (department_id, name) 
VALUES (1, 'Computer Science'),
       (2, 'Engineering'),
       (3, 'Mathematics');

-- Update student's major
UPDATE Students 
SET major = 'Electrical Engineering' 
WHERE student_id = 2;

-- Add a new course along with its instructor and department
INSERT INTO Courses (course_id, course_name, department_id, instructor_id) 
VALUES (104, 'Data Structures', 1, 1);

-- Delete a course that is no longer offered
DELETE FROM Courses 
WHERE course_id = 103;

-- Retrieve Courses offered by 'Computer Science' Department with Instructors
SELECT c.course_name, i.name AS instructor_name
FROM Courses c
INNER JOIN Departments d ON c.department_id = d.department_id
INNER JOIN Instructors i ON c.instructor_id = i.instructor_id
WHERE d.name = 'Computer Science';

-- Find Students Enrolled in a Specific Course by Course ID
SELECT s.name AS student_name
FROM Students s
INNER JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.course_id = 101;

-- Generate a Report of Departments with Count of Courses Offered
SELECT d.name AS department_name, COUNT(c.course_id) AS course_count
FROM Departments d
LEFT JOIN Courses c ON d.department_id = c.department_id
GROUP BY d.name;
